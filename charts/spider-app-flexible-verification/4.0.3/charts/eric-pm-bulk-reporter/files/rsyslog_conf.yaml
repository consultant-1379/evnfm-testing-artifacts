{{- $g := fromJson (include "eric-pm-bulk-reporter.global" .) -}}
##
## === When you're using remote logging, enable on-disk queues ===
## === in rsyslog.d/remote.conf.                               ===
##
## Note, that when the MYSQL, PGSQL, GSSAPI, GnuTLS or SNMP modules
## (provided in separate rsyslog-module-* packages) are enabled, the
## configuration can't be used on a system with /usr on a remote
## filesystem, except on newer systems where initrd mounts /usr.
## [The modules are linked against libraries installed bellow of
##  /usr thus also installed in /usr/lib*/rsyslog because of this.]
##

#
# if you experience problems, check
# http://www.rsyslog.com/troubleshoot for assistance
# and report them at http://bugzilla.novell.com/
#

# since rsyslog v3: load input modules
# If you do not load inputs, nothing happens!

# Ignore update-login-time errors if local users are used.
{{- if and .Values.userConfig.secretName ( .Values.userConfig.secretKey ) }}
:syslogtag, contains, "update-login-time" stop
{{- end }}

# provides --MARK-- message capability (every 1 hour)
$ModLoad immark.so
$MarkMessagePeriod      3600

# provides support for local system logging (e.g. via logger command)
$ModLoad imuxsock.so
$AddUnixListenSocket /var/run/log

# reduce dupplicate log messages (last message repeated n times)
$RepeatedMsgReduction   on

# kernel logging (may be also provided by /sbin/klogd)
# see also http://www.rsyslog.com/doc-imklog.html.
##$ModLoad imklog.so
# set log level 1 (same as in /etc/sysconfig/syslog).
##$klogConsoleLogLevel    1

#
# Set the default permissions for all log files.
#
$FileOwner root
$FileGroup root
$FileCreateMode 0640
$DirCreateMode 0750
$Umask 0022

# Use rsyslog native, rfc5424 conform log format as default
# ($ActionFileDefaultTemplate RSYSLOG_FileFormat).
#
# To change a single file to use obsolete BSD syslog format
# (rfc 3164, no high-precision timestamps), set the variable
# bellow or append ";RSYSLOG_FileFormat" to the filename.
# See
#   http://www.rsyslog.com/doc/rsyslog_conf_templates.html
# for more informations.
#
#$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat

#
# Include config generated by /etc/init.d/syslog script
# using the SYSLOGD_ADDITIONAL_SOCKET* variables in the
# /etc/sysconfig/syslog file.
#
$IncludeConfig /run/rsyslog/additional-log-sockets.conf

#
# Include config files, that the admin provided? :
#
$IncludeConfig /etc/rsyslog.d/*.conf

#
# Custom timestamp (format as rfc3339) to make sure it's as this format: YYYY-MM-DDThh:mm:ss.sss+/-hh:mm
#
template(name="customized_time" type="string" string="%timereported:1:23:date-rfc3339%%timereported:27:32:date-rfc3339%")
set $!customized_ts = exec_template("customized_time");

template(name="eric-log" type="list" option.json="on") {
  constant(value="{")
  constant(value="\"version\":\"0.3.0")
  constant(value="\",\"timestamp\":\"") property(name="$!customized_ts")
  constant(value="\",\"severity\":\"") property(name="$!syslog_severity")
  constant(value="\",\"service_id\":\"eric-pm-bulk-reporter")
  constant(value="\",\"metadata\":{")
  constant(value="\"proc_id\":\"") property(name="syslogtag")
  constant(value="\", \"container_name\":\"eric-pm-sftp")  
  constant(value="\", \"pod_name\":\"")     
  constant(value=`echo $POD_NAME`)
  constant(value="\", \"namespace\":\"")     
  constant(value=`echo $NAMESPACE`)
  constant(value="\"}")
  constant(value=",\"message\":\"") property(name="msg")
  constant(value="\"}\n")
}

template(name="eric-non-audit-log" type="list" option.json="on") {
  constant(value="{")
  constant(value="\"version\":\"0.3.0")
  constant(value="\",\"timestamp\":\"") property(name="$!customized_ts")
  constant(value="\",\"severity\":\"") property(name="$!syslog_severity")
  constant(value="\",\"service_id\":\"eric-pm-bulk-reporter")
  constant(value="\",\"metadata\":{")
  constant(value="\"proc_id\":\"") property(name="syslogtag")
  constant(value="\", \"container_name\":\"eric-pm-sftp")  
  constant(value="\", \"pod_name\":\"")     
  constant(value=`echo $POD_NAME`)
  constant(value="\", \"namespace\":\"")     
  constant(value=`echo $NAMESPACE`)
  constant(value="\"}")
  constant(value=",\"message\":\"") property(name="msg")
  constant(value="\",\"facility\":\"security/authorization messages")
  constant(value="\"}\n")
}

# Removing the string `initenv ` from the $msg
# `initenv {"version":"1.0.0",..."message":"group:  &{489 adp-pm-core} Already....}`
#
template(name="adp-log" type="string" string="%msg:10:$%\n")
template(name="success" type="string" string="%msg:F,32:7%")
template(name="fail" type="string" string="%msg:F,61:8%")

set $!username = 'undefined';

template(name="eric-audit-log" type="list" option.json="on") {
  constant(value="{")
  constant(value="\"version\":\"0.3.0")
  constant(value="\",\"timestamp\":\"") property(name="$!customized_ts")
  constant(value="\",\"severity\":\"") property(name="$!syslog_severity")
  constant(value="\",\"service_id\":\"eric-pm-bulk-reporter")
  constant(value="\",\"metadata\":{")
  constant(value="\"category\":\"") property(name="$!category" format="json")
  constant(value="\",\"proc_id\":\"") property(name="syslogtag")
  constant(value="\", \"container_name\":\"eric-pm-sftp")  
  constant(value="\", \"pod_name\":\"")     
  constant(value=`echo $POD_NAME`)
  constant(value="\", \"namespace\":\"")     
  constant(value=`echo $NAMESPACE`)
  constant(value="\"}")
  constant(value=",\"message\":\"") property(name="msg")
  constant(value="\",\"facility\":\"log audit")
  constant(value="\",\"subject\":\"") property(name="$!username" format="json")
  constant(value="\",\"resp_code\":\"") property(name="$!resp_code" format="json")
  constant(value="\"}\n")
}

if $syslogseverity-text contains 'notice' then {
   set $!syslog_severity = 'info';
} else if $syslogseverity-text contains 'cri' then {
   set $!syslog_severity = 'error';
} else if $syslogseverity-text contains 'err' then {
   set $!syslog_severity = 'error';
} else {
   set $!syslog_severity = $syslogseverity-text;
}

if $msg contains 'session opened for user' then {
    set $!username = exec_template("success");
    set $!category = 'PMBR-sftp-AuthN';
    set $!resp_code = 'success';
    authpriv.*	     -/var/log/messages;eric-audit-log
    authpriv.*       stop
} else if $msg contains 'session closed for user' then {
    set $!username = exec_template("success");
    set $!category = 'PMBR-sftp-logout';
    set $!resp_code = 'success';
    authpriv.*	     -/var/log/messages;eric-non-audit-log
    authpriv.*       stop
} else if $msg contains 'authentication failure' then {
    set $!username = exec_template("fail");
    set $!category = 'PMBR-sftp-AuthN';
    set $!resp_code = 'failure';
    authpriv.*	     -/var/log/messages;eric-audit-log
    authpriv.*       stop
} else if $msg contains '"service_id":"eric-pm-bulk-reporter"' then {
    *.*	     -/var/log/messages;adp-log
    *.*       stop
}
#
# enable this, if you want to keep all messages
# in one file
*.*					-/var/log/messages;eric-log

###
